name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev

jobs:
  build-docker-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
        with:
          version: latest

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y curl
          curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version  # Verify installation

      - name: Install dependencies (Backend)
        run: |
          cd api
          python -m venv .venv
          source .venv/bin/activate
          pip install -r requirements.txt

      - name: Install dependencies (Frontend)
        run: |
          cd front-end-nextjs
          npm install

      - name: Build and start containers with Docker Compose
        run: |
          docker-compose up --build -d

  # push-docker-images:
  #   runs-on: ubuntu-latest
  #   needs: build-docker-images  # Ensures deployment happens only if build passes

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

      - name: Wait for containers to be ready
        run: |
          for i in {1..30}; do
            STATUS=$(docker ps --filter "status=running" -q | wc -l)
            if [ "$STATUS" -eq 2 ]; then
              echo "All services are up!"
              break
            fi
            echo "Waiting for services..."
            sleep 5
            done

      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        run: |
          docker login -u "$DOCKER_USERNAME" -p "$DOCKER_TOKEN"

      - name: Push images to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        run: |
          docker tag devops-qr-code-backend:latest "$DOCKER_USERNAME"/devops-qr-code-backend:latest
          docker tag devops-qr-code-frontend:latest "$DOCKER_USERNAME"/devops-qr-code-frontend:latest
          docker push "$DOCKER_USERNAME"/devops-qr-code-backend:latest
          docker push "$DOCKER_USERNAME"/devops-qr-code-frontend:latest
